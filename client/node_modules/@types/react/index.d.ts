import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import wordsData from "../assests/data";
import { sendScore } from "../Apis/game";
import { getUserIdFromToken } from "../utils/getUserIdFromToken";
import { useAuth } from "../context/AuthContext";

const Game = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [words, setWords] = useState([...wordsData]);
  const [currentWord, setCurrentWord] = useState(null);
  const [scrambledWord, setScrambledWord] = useState("");
  const [userInput, setUserInput] = useState("");
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(10);
  const [attempts, setAttempts] = useState(0);
  const [gameOver, setGameOver] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);
  const [inputStatus, setInputStatus] = useState(null);

  const shuffleWord = (word) => {
    let shuffled = word.split("").sort(() => Math.random() - 0.5).join("");
    while (shuffled === word) {
      shuffled = word.split("").sort(() => Math.random() - 0.5).join("");
    }
    return shuffled;
  };

  const getNewWord = () => {
    if (words.length === 0 || attempts >= 3) {
      setGameOver(true);
      return;
    }
    const randomIndex = Math.floor(Math.random() * words.length);
    const selectedWord = words[randomIndex];
    setCurrentWord(selectedWord);
    setScrambledWord(shuffleWord(selectedWord.answer));
    setWords(words.filter((_, index) => index !== randomIndex));
    setUserInput("");
    setTimeLeft(10);
    setInputStatus(null);
  };

  useEffect(() => {
    if (timeLeft > 0 && currentWord) {
      const timer = setInterval(() => setTimeLeft((prev) => prev - 1), 1000);
      return () => clearInterval(timer);
    } else if (timeLeft === 0) {
      setAttempts((prev) => prev + 1);
      getNewWord();
    }
  }, [timeLeft, currentWord]);

  useEffect(() => {
    if (!gameOver) {
      setScore(0);
      setAttempts(0);
      setWords([...wordsData]);
      getNewWord();
    }
  }, [gameOver]);

  useEffect(() => {
    if (gameOver && score > 0) {
      sendFinalScore(score);
    }
  }, [gameOver, score]);

  const sendFinalScore = async (finalScore) => {
    try {
      const userId = getUserIdFromToken();
      if (!userId) {
        console.error("User ID not found. Unable to send score.");
        return;
      }
      await sendScore({ userId, score: finalScore });
    } catch (error) {
      console.error("Failed to send score:", error);
    }
  };

  const checkAnswer = () => {
    if (userInput.trim().toUpperCase() === currentWord.answer.toUpperCase()) {
      setScore(score + 1);
      setAttempts((prev) => prev + 1);
      setInputStatus("correct");
      setTimeout(() => {
        setInputStatus(null);
        getNewWord();
      }, 300);
    } else {
      setInputStatus("wrong");
      setUserInput("");
      setTimeout(() => {
        setInputStatus(null);
      }, 300);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 px-4">
      {!gameStarted ? (
        <div className="bg-white p-8 rounded-lg shadow-lg text-center">
          <h1 className="text-3xl font-bold text-blue-600">Welcome to Word Scramble</h1>
          <button onClick={() => setGameStarted(true)} className="mt-6 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition-all">
            Start Game
          </button>
        </div>
      ) : gameOver ? (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-8 rounded-lg shadow-lg text-center max-w-md relative">
            <h2 className="text-3xl font-bold text-red-500">Game Over!</h2>
            <p className="text-xl font-semibold text-gray-700 mb-4">Your Score: {score}</p>
            <button onClick={() => { setGameOver(false); setScore(0); setAttempts(0); setWords([...wordsData]); getNewWord(); }} className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded m-2 transition-all">
              Play Again
            </button>
            <button onClick={() => navigate("/leaderboard")} className="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded m-2 transition-all">
              Leaderboard
            </button>
          </div>
        </div>
      ) : currentWord ? (
        <div className="bg-white p-8 md:p-10 rounded-lg shadow-md text-center max-w-lg md:max-w-xl transition-all w-full">
          <h2 className="text-2xl font-bold text-blue-600 mb-4">Word Scramble Game</h2>
          <p className="text-2xl font-semibold text-gray-800 tracking-widest">{scrambledWord}</p>
          <input type="text" className={`border p-3 rounded-lg text-lg w-full transition-all ${inputStatus === "correct" ? "bg-green-200 border-green-500" : ""} ${inputStatus === "wrong" ? "bg-red-200 border-red-500" : ""}`} value={userInput} onChange={(e) => setUserInput(e.target.value)} placeholder="Enter your answer" />
          <button onClick={checkAnswer} className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-lg mt-4 transition-all">
            Submit
          </button>
          <p className="text-red-600 font-semibold">Time Left: {timeLeft}s</p>
        </div>
      ) : null}
    </div>
  );
};

export default Game;
